#!/usr/bin/env php
<?php

use Dimsh\React\Filesystem\Monitor\Monitor;
use Dimsh\React\Filesystem\Monitor\MonitorConfigurator;

if (isset($GLOBALS['_composer_autoload_path'])) {
	define('PHPUNIT_COMPOSER_INSTALL', $GLOBALS['_composer_autoload_path']);

	unset($GLOBALS['_composer_autoload_path']);
} else {
	foreach ([
				 __DIR__ . '/../../autoload.php',
				 __DIR__ . '/../vendor/autoload.php',
				 __DIR__ . '/vendor/autoload.php',
			 ] as $file) {
		if (file_exists($file)) {
			define('PHPUNIT_COMPOSER_INSTALL', $file);

			break;
		}
	}

	unset($file);
}
//var_dump($_SERVER['argv']);
//die;
require PHPUNIT_COMPOSER_INSTALL;
//$resource = inotify_init();
//$phpFiles = \Watcher\ListFiles\ListFiles::listPhpFiles(__DIR__ . '/src');
//$watchers = [];
//foreach ($phpFiles as $phpFile) {
//	$watchers[$phpFile] = inotify_add_watch($resource, $phpFile, IN_MODIFY);
//
//}
////die;
//while (true) {
//	$events = inotify_read($resource);
//	var_dump($events);
//}
//
//
//die;
$tests = __DIR__ . '/tests';
$dir = __DIR__ . '/src';
$listPhpFiles = \Watcher\ListFiles\ListFiles::listPhpFiles($tests);
$count = count($listPhpFiles);
$done = 0;
$testFiles = [];
$sourceFiles = [];
foreach ($listPhpFiles as $listPhpFile) {
	$includes = \Watcher\GetPhpFileIncludes\GetPhpFileIncludes::getPhpFileIncludes($listPhpFile);

	if (!isset($testFiles[$listPhpFile])) {
		$testFiles[$listPhpFile] = [];
	}
	foreach ($includes as $include) {
		$testFiles[$listPhpFile][] = $include;
		if (!isset($sourceFiles[$include])) {
			$sourceFiles[$include] = [];
		}
		$sourceFiles[$include] = $listPhpFile;
	}
	$done += 1;
	\Watcher\StatusBar::show($done, $count);
}
//var_dump($result);
//die;
$phpunit = \Watcher\ListFiles\ListFiles::listFiles(__DIR__ . '/vendor', '/phpunit$/');
//var_dump($phpunit);
//if (count($phpunit) !== 1) {
//	die("x");
//}

$phpunit = $phpunit[0];

$monitor = new Monitor(MonitorConfigurator::factory()
										  ->setLevel(0)
										  ->setFilesToMonitor([
											  '*.php',
										  ])
										  ->setBaseDirectory(__DIR__));
system('clear');
$monitor
	->on(Monitor::EV_CREATE, function ($path, $monitor)
	{
		echo "created:   $path\n";
	})
	->on(Monitor::EV_MODIFY, function ($path, $monitor) use ($phpunit, $testFiles, $sourceFiles)
	{

		if (isset($testFiles[$path])) {
			$arguments = array_shift($_SERVER['argv']) || [];
			$arguments[] = $path;

			$arguments = implode(" ", $arguments);
			system('clear');
			system("$phpunit $arguments");
//			flush();
		} else if (isset($sourceFiles[$path])) {

			$arguments = $_SERVER['argv'];
			unset($arguments[0]);
			$arguments[] = $sourceFiles[$path];
			$arguments = implode(" ", $arguments);

			system('clear');
			system("$phpunit $arguments");
//			flush();

		}
		echo "modified:  $path\n";
	})
	->on(Monitor::EV_DELETE, function ($path, $monitor)
	{
		echo "deleted:   $path\n";
	})
	->run();

//\Watcher\Watch::path(__DIR__ . '/src')
//	->onAnyChange(function (string $type, string $path) {
////		if ($type === \Watcher\Watch::EVENT_TYPE_FILE_CREATED) {
////		}
//			echo "file {$path} was changed";
//	})
//	->start();;
//$files = Watcher\ListFiles\ListFiles::listPhpFiles(__DIR__);
//
//print_r($files);